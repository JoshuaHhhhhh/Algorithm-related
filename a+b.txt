转载自（http://blog.csdn.net/a445849497/article）

首先肯定要想到用位运算来操作，即用二进制来处理，好，既然想到这里，当然要举个例子来想想，最简单的1+2

1的二进制 ・・・・0001

2的二进制 ・・・・0010

3的二进制 ・・・・0011

那a+b不就等于a|b吗？那么，再来验证下1+3

1的二进制 ・・・・0001

3的二进制 ・・・・0011

4的二进制 ・・・・0100

发现之前的猜想错误了，然后再经过一些其他简单的验算，我们会轻而易举的发现一个规律，如果没有进位，那么a+b = a|b 如果有进位就不成立。

所以接下来要处理进位的问题，我们在用1+3来研究下进位的问题，如果我们忽略有进位的位置后，再加上应该进位的位置，就是我们的值。

                             1的二进制(a) ・・・・0001

                             3的二进制(b) ・・・・0011

                 忽略进位的二进制(c) ・・・・0010（忽略有进位的位），既然忽略了进位，那么接下来肯定要加上进位

                        应该进位的值(d) ・・・・0010

我们的值应该是c+d(但是c和d还是有进位，那么再重复上述操作)，即：

                                  c的二进制 ・・・・0010

                                  d的二进制 ・・・・0010

                 忽略进位的二进制(e) ・・・・0000     

                          应该进位的值(f) ・・・・0100

结果就是e+f = 4

所以我们的整体过程应该是先计算a和b（忽略进位），相当于位运算符a^b，再计算应该进位的值，相当于位运算a&b<<1，再把两者相加，相当于位运算a|b（如果还有进位，那么重复前面两步，不能直接a|b），没有进位后，结果就是a|b（之前得出的结论，如果没有进位那么a+b = a|b）。

那么我们的代码如果用一个while循环写就应该是：

int aplusb(int a, int b) {
    int c = 0,d = 0;
    while((a&b) != 0){//检查a和b之间是否有进位 
	    c = a^b; //忽略进位相加 
        d = (a&b)<<1;//应该进位的值 
        a = c;
        b = d;
    }
    return a|b;//没有进位了，直接返回两者|值 
}
精简代码，使用递归 

int aplusb(int a, int b) {	
	if((a&b) == 0)
		return a|b;
	return aplusb(a^b,(a&b)<<1);
}
验算通过即可。